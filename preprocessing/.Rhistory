levels = c(1,2,3,4,5,6,9,10,12,14,15,19,38,39,40,42,43),
labels = c(
"Secondary education","Higher education - bachelor's degree","Higher education - degree",
"Higher education - master's","Higher education - doctorate","Frequency of higher education",
"12th year of schooling - not completed","11th year of schooling - not completed",
"Other - 11th year of schooling","10th year of schooling",
"10th year of schooling - not completed",
"Basic education 3rd cycle (9th/10th/11th year) or equiv.",
"Basic education 2nd cycle (6th/7th/8th year) or equiv.",
"Technological specialization course","Higher education - degree (1st cycle)",
"Professional higher technical course","Higher education - master (2nd cycle)"
),
ordered = FALSE
)
}
# 6) Nacionality
if ("Nacionality" %in% names(df)) {
x <- to_numeric_safely(df$Nacionality)
df$Nacionality <- factor(
x,
levels = c(1,2,6,11,13,14,17,21,22,24,25,26,32,41,62,100,101,103,105,108,109),
labels = c(
"Portuguese","German","Spanish","Italian","Dutch","English","Lithuanian",
"Angolan","Cape Verdean","Guinean","Mozambican","Santomean","Turkish",
"Brazilian","Romanian","Moldova (Republic of)","Mexican","Ukrainian",
"Russian","Cuban","Colombian"
),
ordered = FALSE
)
}
# 7) Mother_s_occupation
if ("Mother_s_occupation" %in% names(df)) {
x <- to_numeric_safely(df$Mother_s_occupation)
mother_levels <- c(
0,1,2,3,4,5,6,7,8,9,10,90,99,122,123,125,131,132,134,141,143,144,151,152,153,171,173,175,191,192,193,194
)
mother_labels <- c(
"Student",
"Representatives of the Legislative Power and Executive Bodies, Directors, Directors and Executive Managers",
"Specialists in Intellectual and Scientific Activities",
"Intermediate Level Technicians and Professions",
"Administrative staff",
"Personal Services, Security and Safety Workers and Sellers",
"Farmers and Skilled Workers in Agriculture, Fisheries and Forestry",
"Skilled Workers in Industry, Construction and Craftsmen",
"Installation and Machine Operators and Assembly Workers",
"Unskilled Workers",
"Armed Forces Professions",
"Other Situation",
"(blank)",
"Health professionals",
"Teachers",
"Specialists in information and communication technologies (ICT)",
"Intermediate level science and engineering technicians and professions",
"Technicians and professionals, intermediate level of health",
"Intermediate level technicians from legal, social, sports, cultural and similar services",
"Office workers, secretaries in general and data processing operators",
"Data, accounting, statistical, financial services and registry-related operators",
"Other administrative support staff",
"Personal service workers",
"Sellers",
"Personal care workers and the like",
"Skilled construction workers and the like, except electricians",
"Skilled workers in printing, precision instrument manufacturing, jewelers, artisans and the like",
"Workers in food processing, woodworking, clothing and other industries and crafts",
"Cleaning workers",
"Unskilled workers in agriculture, animal production, fisheries and forestry",
"Unskilled workers in extractive industry, construction, manufacturing and transport",
"Meal preparation assistants"
)
df$Mother_s_occupation <- factor(x, levels = mother_levels, labels = mother_labels, ordered = FALSE)
}
# 8) Father_s_occupation
if ("Father_s_occupation" %in% names(df)) {
x <- to_numeric_safely(df$Father_s_occupation)
father_levels <- c(
0,1,2,3,4,5,6,7,8,9,10,90,99,101,102,103,112,114,121,122,123,124,
131,132,134,135,141,143,144,151,152,153,154,161,163,171,172,174,175,181,182,183,192,193,194,195
)
father_labels <- c(
"Student",
"Representatives of the Legislative Power and Executive Bodies, Directors, Directors and Executive Managers",
"Specialists in Intellectual and Scientific Activities",
"Intermediate Level Technicians and Professions",
"Administrative staff",
"Personal Services, Security and Safety Workers and Sellers",
"Farmers and Skilled Workers in Agriculture, Fisheries and Forestry",
"Skilled Workers in Industry, Construction and Craftsmen",
"Installation and Machine Operators and Assembly Workers",
"Unskilled Workers",
"Armed Forces Professions",
"Other Situation",
"(blank)",
"Armed Forces Officers",
"Armed Forces Sergeants",
"Other Armed Forces personnel",
"Directors of administrative and commercial services",
"Hotel, catering, trade and other services directors",
"Specialists in the physical sciences, mathematics, engineering and related techniques",
"Health professionals",
"Teachers",
"Specialists in finance, accounting, administrative organization, public and commercial relations",
"Intermediate level science and engineering technicians and professions",
"Technicians and professionals, intermediate level of health",
"Intermediate level technicians from legal, social, sports, cultural and similar services",
"Information and communication technology technicians",
"Office workers, secretaries in general and data processing operators",
"Data, accounting, statistical, financial services and registry-related operators",
"Other administrative support staff",
"Personal service workers",
"Sellers",
"Personal care workers and the like",
"Protection and security services personnel",
"Market-oriented farmers and skilled agricultural and animal production workers",
"Farmers, livestock keepers, fishermen, hunters and gatherers, subsistence",
"Skilled construction workers and the like, except electricians",
"Skilled workers in metallurgy, metalworking and similar",
"Skilled workers in electricity and electronics",
"Workers in food processing, woodworking, clothing and other industries and crafts",
"Fixed plant and machine operators",
"Assembly workers",
"Vehicle drivers and mobile equipment operators",
"Unskilled workers in agriculture, animal production, fisheries and forestry",
"Unskilled workers in extractive industry, construction, manufacturing and transport",
"Meal preparation assistants",
"Street vendors (except food) and street service providers"
)
df$Father_s_occupation <- factor(x, levels = father_levels, labels = father_labels, ordered = FALSE)
}
# 9) Target
if ("Target" %in% names(df)) {
# si és text, només assegura factor amb nivells ordenats
if (is.factor(df$Target)) df$Target <- as.character(df$Target)
if (is.character(df$Target)) df$Target <- trimws(df$Target)
df$Target <- factor(df$Target, levels = c("Dropout","Enrolled","Graduate"), ordered = FALSE)
}
# comprovar si hi ha files amb valors buits (no n'hi ha)
n_total <- nrow(df)
cat("Files totals:", n_total, "\n")
na_per_row <- rowSums(is.na(df))
n_with_na <- sum(na_per_row > 0)
cat("Files amb almenys un NA:", n_with_na, "\n")
##Duplicats (files 100% iguals)
dup_flag <- duplicated(df) | duplicated(df, fromLast = TRUE)
cat("Files duplicades:", sum(dup_flag), "\n")
# Helper: conversió segura a numeric només si cal
to_numeric_safely <- function(x) {
if (is.factor(x)) x <- as.character(x)
if (is.character(x)) { x <- trimws(x); x[x == ""] <- NA; x <- suppressWarnings(as.numeric(x)) }
x
}
# Inicialitza màscara
n <- nrow(df)
flag <- rep(FALSE, n)
# 1) Application_order > 7
x <- to_numeric_safely(df$Application_order)
flag <- flag | (!is.na(x) & x > 7)
# 2) Previous_qualification_grade > 175
x <- to_numeric_safely(df$Previous_qualification_grade)
flag <- flag | (!is.na(x) & x > 175)
# 3) Admission_grade > 175
x <- to_numeric_safely(df$Admission_grade)
flag <- flag | (!is.na(x) & x > 175)
# 4) Enrolled/Evaluations/Approved > 11 (1r i 2n semestre)
x <- to_numeric_safely(df$Curricular_units_1st_sem_enrolled)
flag <- flag | (!is.na(x) & x > 11)
x <- to_numeric_safely(df$Curricular_units_2nd_sem_enrolled)
flag <- flag | (!is.na(x) & x > 11)
x <- to_numeric_safely(df$Curricular_units_1st_sem_evaluations)
flag <- flag | (!is.na(x) & x > 11)
x <- to_numeric_safely(df$Curricular_units_2nd_sem_evaluations)
flag <- flag | (!is.na(x) & x > 11)
x <- to_numeric_safely(df$Curricular_units_1st_sem_approved)
flag <- flag | (!is.na(x) & x > 11)
x <- to_numeric_safely(df$Curricular_units_2nd_sem_approved)
flag <- flag | (!is.na(x) & x > 11)
# Informe i filtratge
cat("Outliers detectats:", sum(flag, na.rm = TRUE), "files\n")
df_clean <- df[!flag, , drop = FALSE]
# install.packages("SmartEDA") # si cal
library(SmartEDA)
# 1) Variables exactes d'interès
vars <- c(
"Curricular_units_1st_sem_enrolled",
"Curricular_units_2nd_sem_enrolled",
"Curricular_units_1st_sem_credited",
"Curricular_units_2nd_sem_credited",
"Curricular_units_1st_sem_evaluations",
"Curricular_units_2nd_sem_evaluations",
"Curricular_units_1st_sem_approved",
"Curricular_units_2nd_sem_approved",
"Curricular_units_1st_sem_without_evaluations",
"Curricular_units_2nd_sem_without_evaluations",
"Curricular_units_1st_sem_grade",
"Curricular_units_2nd_sem_grade"
)
vars <- intersect(vars, names(df))
stopifnot(length(vars) > 0)
# 2) Paràmetres de paginació
per_pagina <- 4      # 4 gràfics per imatge (2x2)
n_pages <- ceiling(length(vars) / per_pagina)
# 3) Generació de PNGs paginats (una imatge per lot)
for (p in seq_len(n_pages)) {
slice <- ((p - 1) * per_pagina + 1):min(p * per_pagina, length(vars))
sel <- vars[slice]
fname <- sprintf("SmartEDA_QQ_page_%02d.png", p)
png(filename = fname, width = 1800, height = 1200, res = 150)
ExpNumViz(
data = df,
target = NULL,
gp = 1,                  # multipanel
nlim = length(sel),      # nombre de gràfics en aquesta pàgina
var = sel,               # variables d’aquesta pàgina
type = 3                 # Q-Q plots
)
dev.off()
message("Creat: ", fname)
}
# install.packages("SmartEDA") # si cal
library(SmartEDA)
# 1) Variables exactes d'interès
vars <- c(
"Curricular_units_1st_sem_enrolled",
"Curricular_units_2nd_sem_enrolled",
"Curricular_units_1st_sem_credited",
"Curricular_units_2nd_sem_credited",
"Curricular_units_1st_sem_evaluations",
"Curricular_units_2nd_sem_evaluations",
"Curricular_units_1st_sem_approved",
"Curricular_units_2nd_sem_approved",
"Curricular_units_1st_sem_without_evaluations",
"Curricular_units_2nd_sem_without_evaluations",
"Curricular_units_1st_sem_grade",
"Curricular_units_2nd_sem_grade"
)
vars <- intersect(vars, names(df))   # només les que existeixen
stopifnot(length(vars) > 0)
# install.packages("SmartEDA") # si cal
library(SmartEDA)
per_pagina <- 4
n_pages <- ceiling(length(vars) / per_pagina)
for (p in seq_len(n_pages)) {
idx <- ((p - 1) * per_pagina + 1):min(p * per_pagina, length(vars))
sel <- vars[idx]
# Subset de df només amb les columnes d’aquesta pàgina
df_page <- df[, sel, drop = FALSE]
fname <- sprintf("SmartEDA_QQ_page_%02d.png", p)
png(filename = fname, width = 1800, height = 1200, res = 150)
# ExpNumViz dibuixa Q-Q per totes les numèriques del data argument
ExpNumViz(
data   = df_page,
target = NULL,
type   = 3  # Q-Q plots
)
dev.off()
message("Creat: ", fname)
}
library(SmartEDA)
# Variables exactes a graficar
vars <- c(
"Curricular_units_1st_sem_enrolled",
"Curricular_units_2nd_sem_enrolled",
"Curricular_units_1st_sem_credited",
"Curricular_units_2nd_sem_credited",
"Curricular_units_1st_sem_evaluations",
"Curricular_units_2nd_sem_evaluations",
"Curricular_units_1st_sem_approved",
"Curricular_units_2nd_sem_approved",
"Curricular_units_1st_sem_without_evaluations",
"Curricular_units_2nd_sem_without_evaluations",
"Curricular_units_1st_sem_grade",
"Curricular_units_2nd_sem_grade"
)
vars <- intersect(vars, names(df))
stopifnot(length(vars) > 0)
# Converteix a numeric si cal perquè SmartEDA les consideri numèriques
to_numeric_safely <- function(x) {
if (is.factor(x)) x <- as.character(x)
if (is.character(x)) { x <- trimws(x); x[x == ""] <- NA; x <- suppressWarnings(as.numeric(x)) }
x
}
for (nm in vars) {
if (!is.numeric(df[[nm]])) df[[nm]] <- to_numeric_safely(df[[nm]])
}
# Paginació: 4 gràfics per pàgina (2x2) mostrats al panell de Plots
per_pagina <- 4
n_pages <- ceiling(length(vars) / per_pagina)
oldpar <- par(no.readonly = TRUE)
on.exit(par(oldpar))
for (p in seq_len(n_pages)) {
idx <- ((p - 1) * per_pagina + 1):min(p * per_pagina, length(vars))
sel <- vars[idx]
# Subset del dataframe només amb aquestes columnes
df_page <- df[, sel, drop = FALSE]
# SmartEDA dibuixa tots els Q-Q de les numèriques presents a 'data'
ExpNumViz(
data   = df_page,
target = NULL,
type   = 3   # Q-Q plot
)
}
View(df_page)
View(oldpar)
library(SmartEDA)
vars <- c(
"Curricular_units_1st_sem_enrolled",
"Curricular_units_2nd_sem_enrolled",
"Curricular_units_1st_sem_credited",
"Curricular_units_2nd_sem_credited",
"Curricular_units_1st_sem_evaluations",
"Curricular_units_2nd_sem_evaluations",
"Curricular_units_1st_sem_approved",
"Curricular_units_2nd_sem_approved",
"Curricular_units_1st_sem_without_evaluations",
"Curricular_units_2nd_sem_without_evaluations",
"Curricular_units_1st_sem_grade",
"Curricular_units_2nd_sem_grade"
)
vars <- intersect(vars, names(df))
stopifnot(length(vars) > 0)
to_numeric_safely <- function(x) {
if (is.factor(x)) x <- as.character(x)
if (is.character(x)) { x <- trimws(x); x[x == ""] <- NA; x <- suppressWarnings(as.numeric(x)) }
x
}
oldpar <- par(no.readonly = TRUE)
on.exit(par(oldpar))
par(mfrow = c(2, 2), mar = c(4, 4, 2.5, 1))
count <- 0
for (nm in vars) {
# comença una nova pàgina cada 4 gràfics
if (count %% 4 == 0 && count > 0) {
dev.flush(); dev.hold()  # ajuda a forçar el render en alguns dispositius
par(mfrow = c(2, 2), mar = c(4, 4, 2.5, 1))
}
v <- to_numeric_safely(df[[nm]])
df_one <- data.frame(tmp = v)
names(df_one) <- nm
ExpNumViz(data = df_one, target = NULL, type = 3)
count <- count + 1
library(SmartEDA)
vars <- c(
"Curricular_units_1st_sem_enrolled",
"Curricular_units_2nd_sem_enrolled",
"Curricular_units_1st_sem_credited",
"Curricular_units_2nd_sem_credited",
"Curricular_units_1st_sem_evaluations",
"Curricular_units_2nd_sem_evaluations",
"Curricular_units_1st_sem_approved",
"Curricular_units_2nd_sem_approved",
"Curricular_units_1st_sem_without_evaluations",
"Curricular_units_2nd_sem_without_evaluations",
"Curricular_units_1st_sem_grade",
"Curricular_units_2nd_sem_grade"
)
vars <- intersect(vars, names(df))
stopifnot(length(vars) > 0)
to_numeric_safely <- function(x) {
if (is.factor(x)) x <- as.character(x)
if (is.character(x)) { x <- trimws(x); x[x == ""] <- NA; x <- suppressWarnings(as.numeric(x)) }
x
}
oldpar <- par(no.readonly = TRUE)
on.exit(par(oldpar))
par(mfrow = c(2, 2), mar = c(4, 4, 2.5, 1))
count <- 0
for (nm in vars) {
# comença una nova pàgina cada 4 gràfics
if (count %% 4 == 0 && count > 0) {
dev.flush(); dev.hold()  # ajuda a forçar el render en alguns dispositius
par(mfrow = c(2, 2), mar = c(4, 4, 2.5, 1))
}
v <- to_numeric_safely(df[[nm]])
df_one <- data.frame(tmp = v)
names(df_one) <- nm
ExpNumViz(data = df_one, target = NULL, type = 3)
count <- count + 1
}
# Variables exactes a graficar
vars <- c(
"Curricular_units_1st_sem_enrolled",
"Curricular_units_2nd_sem_enrolled",
"Curricular_units_1st_sem_credited",
"Curricular_units_2nd_sem_credited",
"Curricular_units_1st_sem_evaluations",
"Curricular_units_2nd_sem_evaluations",
"Curricular_units_1st_sem_approved",
"Curricular_units_2nd_sem_approved",
"Curricular_units_1st_sem_without_evaluations",
"Curricular_units_2nd_sem_without_evaluations",
"Curricular_units_1st_sem_grade",
"Curricular_units_2nd_sem_grade"
)
vars <- intersect(vars, names(df))
stopifnot(length(vars) > 0)
# Conversió segura a numeric si cal
to_numeric_safely <- function(x) {
if (is.factor(x)) x <- as.character(x)
if (is.character(x)) { x <- trimws(x); x[x == ""] <- NA; x <- suppressWarnings(as.numeric(x)) }
x
}
oldpar <- par(no.readonly = TRUE)
on.exit(par(oldpar))
par(mfrow = c(2, 2), mar = c(4.5, 4.5, 3, 1))
count <- 0L
for (nm in vars) {
# Nova pàgina cada 4 gràfics
if (count > 0L && (count %% 4L) == 0L) {
dev.new(noRStudioGD = TRUE)  # obre una nova pestanya/ventana de Plots
par(mfrow = c(2, 2), mar = c(4.5, 4.5, 3, 1))
}
x <- to_numeric_safely(df[[nm]])
x <- x[is.finite(x)]
if (length(unique(x)) < 3L) {
plot.new(); title(main = paste("Normal Q-Q Plot\n", nm))
} else {
qqnorm(x,
main = "Normal Q-Q Plot",
xlab = "Theoretical Quantiles",
ylab = nm,
pch = 1, col = "black", cex = 0.8)
qqline(x, col = "steelblue3", lwd = 2)
}
count <- count + 1L
}
# Variables exactes a graficar
vars <- c(
"Curricular_units_1st_sem_enrolled",
"Curricular_units_2nd_sem_enrolled",
"Curricular_units_1st_sem_credited",
"Curricular_units_2nd_sem_credited",
"Curricular_units_1st_sem_evaluations",
"Curricular_units_2nd_sem_evaluations",
"Curricular_units_1st_sem_approved",
"Curricular_units_2nd_sem_approved",
"Curricular_units_1st_sem_without_evaluations",
"Curricular_units_2nd_sem_without_evaluations",
"Curricular_units_1st_sem_grade",
"Curricular_units_2nd_sem_grade"
)
vars <- intersect(vars, names(df))
stopifnot(length(vars) > 0)
# Conversió segura a numeric si cal
to_numeric_safely <- function(x) {
if (is.factor(x)) x <- as.character(x)
if (is.character(x)) { x <- trimws(x); x[x == ""] <- NA; x <- suppressWarnings(as.numeric(x)) }
x
}
oldpar <- par(no.readonly = TRUE)
on.exit(par(oldpar))
par(mfrow = c(2, 2), mar = c(4.5, 4.5, 3, 1))
count <- 0L
for (nm in vars) {
# Nova pàgina cada 4 gràfics
if (count > 0L && (count %% 4L) == 0L) {
dev.new(noRStudioGD = TRUE)  # obre una nova pestanya/ventana de Plots
par(mfrow = c(2, 2), mar = c(4.5, 4.5, 3, 1))
}
x <- to_numeric_safely(df[[nm]])
x <- x[is.finite(x)]
if (length(unique(x)) < 3L) {
plot.new(); title(main = paste("Normal Q-Q Plot\n", nm))
} else {
qqnorm(x,
main = "Normal Q-Q Plot",
xlab = "Theoretical Quantiles",
ylab = nm,
pch = 1, col = "black", cex = 0.8)
qqline(x, col = "steelblue3", lwd = 2)
}
count <- count + 1L
}
View(oldpar)
# Vector de variables
vars <- c(
"Curricular_units_1st_sem_enrolled",
"Curricular_units_2nd_sem_enrolled",
"Curricular_units_1st_sem_credited",
"Curricular_units_2nd_sem_credited",
"Curricular_units_1st_sem_evaluations",
"Curricular_units_2nd_sem_evaluations",
"Curricular_units_1st_sem_approved",
"Curricular_units_2nd_sem_approved",
"Curricular_units_1st_sem_without_evaluations",
"Curricular_units_2nd_sem_without_evaluations",
"Curricular_units_1st_sem_grade",
"Curricular_units_2nd_sem_grade"
)
# Suposa que el teu dataframe es diu df
# Configuració perquè surti una gràfica cada cop (interactiu)
op <- par(mfrow = c(1,1))  # garantit una per figura
on.exit(par(op), add = TRUE)
for (v in vars) {
if (!v %in% names(df)) {
warning(sprintf("Variable no trobada al dataframe: %s", v))  # avisa si falta [memory:1]
next
}
x <- df[[v]]
# Converteix a numèric si és factor o caràcter
if (is.factor(x) || is.character(x)) {
suppressWarnings(x <- as.numeric(as.character(x)))  # conversió segura [memory:1]
}
# Neteja NAs i infinits
x <- x[is.finite(x)]
# QQ-plot normal
qqnorm(x,
main = sprintf("QQ-plot normal: %s", v),
pch = 19, col = "#1f77b4")
qqline(x, col = "#d62728", lwd = 2)
# Pausa fins que premis Enter per veure el següent
readline(prompt = "Prem Enter per continuar...")
}
