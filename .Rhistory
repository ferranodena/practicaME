"Daytime_evening_attendance","Displaced","Educational_special_needs",
# 1) Carrega dades
df <- read_csv("raw-data.csv", show_col_types = FALSE)
# 1) Carrega dades
df <- read_csv("./raw-data.csv", show_col_types = FALSE)
# 2) Normalitza noms (espais -> guions baixos, caràcters especials fora)
names(df) <- names(df) |>
str_replace_all("[^A-Za-z0-9]+", "_") |>
str_replace_all("_+", "_") |>
str_remove("^_") |>
str_remove("_$")
# 3) Llistes de columnes per tipus (segons metadades)
cat_cols <- c(
"Marital_status","Application_mode","Course","Previous_qualification",
"Nacionality","Mothers_occupation","Fathers_occupation","Target"
)
bin_cols <- c(
"Daytime_evening_attendance","Displaced","Educational_special_needs",
"Debtor","Tuition_fees_up_to_date","Gender","Scholarship_holder","International"
)
# 4) Conversions a factor
df <- df |>
mutate(across(any_of(cat_cols), as.factor)) |>
mutate(across(any_of(bin_cols), ~ factor(.x, levels = c(0,1), labels = c("No","Si"))))
# 5) Opcional: força que variables ordinal-numèriques quedin numèriques
num_cols <- c(
"Application_order","Previous_qualification_grade","Admission_grade",
"Age_at_enrollment",
"Curricular_units_1st_sem_credited","Curricular_units_1st_sem_enrolled",
"Curricular_units_1st_sem_evaluations","Curricular_units_1st_sem_approved",
"Curricular_units_1st_sem_grade","Curricular_units_1st_sem_without_evaluations",
"Curricular_units_2nd_sem_credited","Curricular_units_2nd_sem_enrolled",
"Curricular_units_2nd_sem_evaluations","Curricular_units_2nd_sem_approved",
"Curricular_units_2nd_sem_grade","Curricular_units_2nd_sem_without_evaluations",
"Unemployment_rate","Inflation_rate","GDP"
)
df <- df |> mutate(across(any_of(num_cols), readr::parse_number))
# 6) Comprova resultats
str(df)
summary(df$Target)
levels(df$Gender)
# 1) Carrega dades
df <- read_csv(·"C:/Users/User/Documents/universitat/2n1q/me/projecte/practicaME/raw-data.csv", show_col_types = FALSE)
# 2) Normalitza noms (espais -> guions baixos, caràcters especials fora)
names(df) <- names(df) |>
str_replace_all("[^A-Za-z0-9]+", "_") |>
str_replace_all("_+", "_") |>
str_remove("^_") |>
str_remove("_$")
# 3) Llistes de columnes per tipus (segons metadades)
cat_cols <- c(
"Marital_status","Application_mode","Course","Previous_qualification",
"Nacionality","Mothers_occupation","Fathers_occupation","Target"
)
bin_cols <- c(
"Daytime_evening_attendance","Displaced","Educational_special_needs",
"Debtor","Tuition_fees_up_to_date","Gender","Scholarship_holder","International"
)
# 4) Conversions a factor
df <- df |>
mutate(across(any_of(cat_cols), as.factor)) |>
mutate(across(any_of(bin_cols), ~ factor(.x, levels = c(0,1), labels = c("No","Si"))))
# 5) Opcional: força que variables ordinal-numèriques quedin numèriques
num_cols <- c(
"Application_order","Previous_qualification_grade","Admission_grade",
"Age_at_enrollment",
"Curricular_units_1st_sem_credited","Curricular_units_1st_sem_enrolled",
"Curricular_units_1st_sem_evaluations","Curricular_units_1st_sem_approved",
"Curricular_units_1st_sem_grade","Curricular_units_1st_sem_without_evaluations",
"Curricular_units_2nd_sem_credited","Curricular_units_2nd_sem_enrolled",
"Curricular_units_2nd_sem_evaluations","Curricular_units_2nd_sem_approved",
"Curricular_units_2nd_sem_grade","Curricular_units_2nd_sem_without_evaluations",
"Unemployment_rate","Inflation_rate","GDP"
)
df <- df |> mutate(across(any_of(num_cols), readr::parse_number))
# 6) Comprova resultats
str(df)
summary(df$Target)
levels(df$Gender)
# 1) Carrega dades
df <- read_csv(·"C:/Users/User/Documents/universitat/2n1q/me/projecte/practicaME/raw-data.csv", show_col_types = FALSE)
# 1) Carrega dades
df <- read_csv("C:/Users/User/Documents/universitat/2n1q/me/projecte/practicaME/raw-data.csv", show_col_types = FALSE)
df <- read.csv2("C:/Users/User/Documents/universitat/2n1q/me/projecte/practicaME/raw-data.csv", show_col_types = FALSE)
df <- read.csv2("C:/Users/User/Documents/universitat/2n1q/me/projecte/practicaME/raw-data.csv")
# 2) Normalitza noms (espais -> guions baixos, caràcters especials fora)
names(df) <- names(df) |>
str_replace_all("[^A-Za-z0-9]+", "_") |>
str_replace_all("_+", "_") |>
str_remove("^_") |>
str_remove("_$")
df$`Marital status` <- factor(df$`Marital status`, ordered = FALSE)
df$`Application mode` <- factor(df$`Application mode`, ordered = FALSE)
df$`Application order` <- factor(df$`Application order`, ordered = FALSE)
df <- read.csv(""./universitat/2n1q/me/projecte/practicaME/raw-data.csv"", sep = ";", stringsAsFactors = FALSE)
df <- read.csv("./universitat/2n1q/me/projecte/practicaME/raw-data.csv", sep = ";", stringsAsFactors = FALSE)
df <- read.csv("C:/Users/User/Documents/universitat/2n1q/me/projecte/practicaME/raw-data.csv", sep = ";", stringsAsFactors = FALSE)
df$`Marital status` <- factor(df$`Marital status`, ordered = FALSE)
df <- read.csv("C:/Users/User/Documents/universitat/2n1q/me/projecte/practicaME/raw-data.csv", sep = ";", stringsAsFactors = FALSE)
# Substituir espais i tab per underscore en tots els noms de columna
names(df) <- gsub("[ \t]+", "_", names(df))
# Comprovar
head(names(df))
df$`Marital.status` <- factor(df$`Marital status`, ordered = FALSE)
df$`Marital status` <- factor(df$`Marital status`, ordered = FALSE)
df$`Marital status` <- factor(df$`Marital status`, ordered = FALSE)
df$`Marital_status` <- factor(df$`Marital status`, ordered = FALSE)
df$`Marital_status` <- factor(df$`Marital status`, ordered = FALSE)
df$`Marital_status` <- factor(df$`Marital status`, ordered = FALSE)
df <- read.csv("C:/Users/User/Documents/universitat/2n1q/me/projecte/practicaME/raw-data.csv", sep = ";", stringsAsFactors = FALSE)
# Substituir espais i tab per underscore en tots els noms de columna
names(df) <- gsub("[ \t]+", "_", names(df)
head(names(df))
# Substituir espais i tab per underscore en tots els noms de columna
names(df) <- gsub("[ \t]+", "_", names(df))
# Comprovar
head(names(df))
df$`Marital.status` <- factor(df$`Marital.status`, ordered = FALSE)
df$`Application.mode` <- factor(df$`Application mode`, ordered = FALSE)
df <- read.csv("C:/Users/User/Documents/universitat/2n1q/me/projecte/practicaME/raw-data.csv", sep = ";", stringsAsFactors = FALSE, check.names = FALSE)
2) Substituir espais i tabuladors per underscores
names(df) <- gsub("[ \t]+", "_", names(df))
head(names(df))
df$Marital_status               <- factor(df$Marital_status,               ordered = FALSE)
df$Application_mode             <- factor(df$Application_mode,             ordered = FALSE)
df$Application_order            <- factor(df$Application_order,            ordered = FALSE)
df$Course                       <- factor(df$Course,                       ordered = FALSE)
df$Daytime_evening_attendance   <- factor(df$Daytime_evening_attendance,   ordered = FALSE)
names(df) <- gsub("[ \t]+", "_", names(df))
names(df) <- gsub("[^A-Za-z0-9]+", "_", names(df))
names(df) <- gsub("_+", "_", names(df))
names(df) <- gsub("^_|_$", "", names(df))
head(names(df))
# 4) Convertir a factors amb les noves columnes
df$Marital_status               <- factor(df$Marital_status,               ordered = FALSE)
df$Application_mode             <- factor(df$Application_mode,             ordered = FALSE)
df$Application_order            <- factor(df$Application_order,            ordered = FALSE)
df$Course                       <- factor(df$Course,                       ordered = FALSE)
df$Daytime_evening_attendance   <- factor(df$Daytime_evening_attendance,   ordered = FALSE)
df$Previous_qualification       <- factor(df$Previous_qualification,       ordered = FALSE)
df$Displaced                    <- factor(df$Displaced,                    ordered = FALSE)
df$Educational_special_needs    <- factor(df$Educational_special_needs,    ordered = FALSE)
df$Debtor                       <- factor(df$Debtor,                       ordered = FALSE)
df$Tuition_fees_up_to_date      <- factor(df$Tuition_fees_up_to_date,      ordered = FALSE)
df$Gender                       <- factor(df$Gender,                       ordered = FALSE)
df$Scholarship_holder           <- factor(df$Scholarship_holder,           ordered = FALSE)
df$International                <- factor(df$International,                ordered = FALSE)
df <- read.csv("C:/Users/User/Documents/universitat/2n1q/me/projecte/practicaME/raw-data.csv", sep = ";",
stringsAsFactors = FALSE, check.names = FALSE)
names(df) <- gsub("[ \t]+", "_", names(df))
names(df) <- gsub("[^A-Za-z0-9]+", "_", names(df))
names(df) <- gsub("_+", "_", names(df))
names(df) <- gsub("^_|_$", "", names(df))
head(names(df)) #mostrem els noms per a assegurar els canvis
# convertim les variables categòriques i binàries en categòriques i binàries amb R
df$Marital_status               <- factor(df$Marital_status,               ordered = FALSE)
df$Application_mode             <- factor(df$Application_mode,             ordered = FALSE)
df$Application_order            <- factor(df$Application_order,            ordered = FALSE)
df$Course                       <- factor(df$Course,                       ordered = FALSE)
df$Daytime_evening_attendance   <- factor(df$Daytime_evening_attendance,   ordered = FALSE)
df$Previous_qualification       <- factor(df$Previous_qualification,       ordered = FALSE)
df$Displaced                    <- factor(df$Displaced,                    ordered = FALSE)
df$Educational_special_needs    <- factor(df$Educational_special_needs,    ordered = FALSE)
df$Debtor                       <- factor(df$Debtor,                       ordered = FALSE)
df$Tuition_fees_up_to_date      <- factor(df$Tuition_fees_up_to_date,      ordered = FALSE)
df$Gender                       <- factor(df$Gender,                       ordered = FALSE)
df$Scholarship_holder           <- factor(df$Scholarship_holder,           ordered = FALSE)
df$International                <- factor(df$International,                ordered = FALSE)
num_vars <- setdiff(names(df), c(cat_vars, "Target"))
# 3) Convertir totes les variables categòriques a factors
cat_vars <- c("Marital_status", "Application_mode", "Application_order",
"Course", "Daytime_evening_attendance", "Previous_qualification",
"Displaced", "Educational_special_needs", "Debtor",
"Tuition_fees_up_to_date", "Gender", "Scholarship_holder",
"International",
"Curricular_units_1st_sem_without_evaluations",
"Curricular_units_2nd_sem_credited",
"Curricular_units_2nd_sem_approved",
"Curricular_units_2nd_sem_without_evaluations",
"Unemployment_rate", "Inflation_rate", "GDP")
for (v in cat_vars) {
df[[v]] <- factor(df[[v]], ordered = FALSE)
}
# 4) Identificar variables numèriques reals
num_vars <- setdiff(names(df), c(cat_vars, "Target"))
# 5) Especificar fórmula amb totes les variables
all_vars <- c(cat_vars, num_vars)
formula_glm <- as.formula(paste("Target ~", paste(all_vars, collapse = " + ")))
# 6) Ajustar el model (binomial per dropout vs graduate)
model_glm <- glm(formula_glm, data = df, family = binomial(link = "logit"))
# 4) Identificar variables numèriques reals
num_vars <- setdiff(names(df), c(cat_vars, "Target"))
# 5) Especificar fórmula amb totes les variables
all_vars <- c(cat_vars, num_vars)
formula_glm <- as.formula(paste("Target ~", paste(all_vars, collapse = " + ")))
# 6) Ajustar el model (binomial per dropout vs graduate)
model_glm <- glm(formula_glm, data = df, family = binomial(link = "log"))
model_glm <- glm(formula_glm, data = df, family = linear (link = "log"))
model_glm <- glm(formula_glm, data = df, family = lineal(link = "log"))
model_glm <- glm(formula_glm, data = df, family = canonical(link = "log"))
# asseguraem que la resta de columnes són numèriques
all_names <- names(df)
# llistat de variables que hem convertit a factor
cat_vars <- c(
"Marital_status", "Application_mode", "Application_order",
"Course", "Daytime_evening_attendance", "Previous_qualification",
"Displaced", "Educational_special_needs", "Debtor",
"Tuition_fees_up_to_date", "Gender", "Scholarship_holder",
"International"
)
# variables restants a comprovar
num_vars <- setdiff(all_names, cat_vars)
# Comprovació: TRUE si la columna és numèrica (integer o numeric)
numeric_check <- sapply(df[num_vars], function(x) is.numeric(x) || is.integer(x))
print(numeric_check)
# 3) Variables a convertir segons metadata (Tipus ≠ Numèrica)
cat_vars <- c(
"Marital_status",
"Application_mode",
"Course",
"Daytime_evening_attendance",
"Previous_qualification",
"Previous_qualification_grade",
"Nacionality",
"Mother_s_occupation",
"Father_s_occupation",
"Displaced",
"Educational_special_needs",
"Debtor",
"Tuition_fees_up_to_date",
"Gender",
"Scholarship_holder",
"International"
)
df <- read.csv(
"C:/Users/User/Documents/universitat/2n1q/me/projecte/practicaME/raw-data.csv",
sep = ";", stringsAsFactors = FALSE, check.names = FALSE
)
# les convertim en factors
for (v in cat_vars) {
df[[v]] <- factor(df[[v]], ordered = FALSE)
}
df <- read.csv(
"C:/Users/User/Documents/universitat/2n1q/me/projecte/practicaME/raw-data.csv",
sep = ";", stringsAsFactors = FALSE, check.names = FALSE
)
# neteja de noms: tot el que no sigui lletra o dígit → underscore
nnames(df) <- gsub("[^A-Za-z0-9]+", "_", names(df))
df <- read.csv(
"C:/Users/User/Documents/universitat/2n1q/me/projecte/practicaME/raw-data.csv",
sep = ";", stringsAsFactors = FALSE, check.names = FALSE
)
# neteja de noms: tot el que no sigui lletra o dígit → underscore
names(df) <- gsub("[^A-Za-z0-9]+", "_", names(df))
names(df) <- gsub("_+", "_", names(df))
names(df) <- gsub("^_|_$", "", names(df))
# variables que no siguin numèriques que calen convertir
cat_vars <- c(
"Marital_status",
"Application_mode",
"Course",
"Daytime_evening_attendance",
"Previous_qualification",
"Previous_qualification_grade",
"Nacionality",
"Mother_s_occupation",
"Father_s_occupation",
"Displaced",
"Educational_special_needs",
"Debtor",
"Tuition_fees_up_to_date",
"Gender",
"Scholarship_holder",
"International"
)
# les convertim en factors
for (v in cat_vars) {
df[[v]] <- factor(df[[v]], ordered = FALSE)
}
sapply(df[cat_vars], class)
#
num_vars <- setdiff(names(df), cat_vars)
sapply(df[num_vars], class)
model_glm <- glm(Target ~ ., data = df, family = binomial(link = "logit"))
# variables que no siguin numèriques que calen convertir
cat_vars <- c(
"Marital_status",
"Application_mode",
"Course",
"Daytime_evening_attendance",
"Previous_qualification",
"Previous_qualification_grade",
"Nacionality",
"Mother_s_occupation",
"Father_s_occupation",
"Displaced",
"Educational_special_needs",
"Debtor",
"Tuition_fees_up_to_date",
"Gender",
"Scholarship_holder",
"International",
"Target"
)
# les convertim en factors
for (v in cat_vars) {
df[[v]] <- factor(df[[v]], ordered = FALSE)
}
# comprovar que  són factors
sapply(df[cat_vars], class)
# comprovar que la resta són enters (integer) o numèriques contínues ()
num_vars <- setdiff(names(df), cat_vars)
sapply(df[num_vars], class)
model_glm <- glm(Target ~ ., data = df, family = binomial(link = "logit"))
summary(model_glm)
model_glm
summary(model_glm)
n_total <- nrow(df)
cat("Files totals:", n_total, "\n")
na_per_row <- rowSums(is.na(df))
n_with_na <- sum(na_per_row > 0)
cat("Files amb almenys un NA:", n_with_na, "\n")
# executar per a descarregar les dependències necessàries en el projecte
install.packages("DataExplorer")
install.packages("SmartEDA")
library(SmartEDA)
library(DataExplorer)
data("raw-data.csv")
df <- read.csv("raw-data.csv")
setwd("~/universitat/2n1q/me/projecte/practicaME")
save.image("~/universitat/2n1q/me/ws-projecte.RData")
data("raw-data.csv")
df <- read.csv("raw-data.csv")
df <- read.csv("raw-data.csv")
create_report(df, report_title = "EDA inicial")
# comprovar si hi ha files amb valors buits (no n'hi ha)
n_total <- nrow(df)
df <- read.csv("raw-data.csv",
sep = ";", stringsAsFactors = FALSE, check.names = FALSE
)
# neteja de noms: tot el que no sigui lletra o dígit → underscore
names(df) <- gsub("[^A-Za-z0-9]+", "_", names(df))
names(df) <- gsub("_+", "_", names(df))
names(df) <- gsub("^_|_$", "", names(df))
# variables que no siguin numèriques que calen convertir
cat_vars <- c(
"Marital_status",
"Application_mode",
"Course",
"Daytime_evening_attendance",
"Previous_qualification",
"Previous_qualification_grade",
"Nacionality",
"Mother_s_occupation",
"Father_s_occupation",
"Displaced",
"Educational_special_needs",
"Debtor",
"Tuition_fees_up_to_date",
"Gender",
"Scholarship_holder",
"International",
"Target"
)
# les convertim en factors
for (v in cat_vars) {
df[[v]] <- factor(df[[v]], ordered = FALSE)
}
# comprovar que  són factors
sapply(df[cat_vars], class)
# comprovar que la resta són enters (integer) o numèriques contínues ()
num_vars <- setdiff(names(df), cat_vars)
sapply(df[num_vars], class)
# comprovar si hi ha files amb valors buits (no n'hi ha)
n_total <- nrow(df)
cat("Files totals:", n_total, "\n")
na_per_row <- rowSums(is.na(df))
n_with_na <- sum(na_per_row > 0)
cat("Files amb almenys un NA:", n_with_na, "\n")
df <- read.csv("raw-data.csv")
df <- read.csv("raw-data.csv",
sep = ";", stringsAsFactors = FALSE, check.names = FALSE
)
# neteja de noms: tot el que no sigui lletra o dígit → underscore
names(df) <- gsub("[^A-Za-z0-9]+", "_", names(df))
names(df) <- gsub("_+", "_", names(df))
names(df) <- gsub("^_|_$", "", names(df))
# variables que no siguin numèriques que calen convertir
cat_vars <- c(
"Marital_status",
"Application_mode",
"Course",
"Daytime_evening_attendance",
"Previous_qualification",
"Previous_qualification_grade",
"Nacionality",
"Mother_s_occupation",
"Father_s_occupation",
"Displaced",
"Educational_special_needs",
"Debtor",
"Tuition_fees_up_to_date",
"Gender",
"Scholarship_holder",
"International",
"Target"
)
# les convertim en factors
for (v in cat_vars) {
df[[v]] <- factor(df[[v]], ordered = FALSE)
}
# comprovar que  són factors
sapply(df[cat_vars], class)
# comprovar que la resta són enters (integer) o numèriques contínues ()
num_vars <- setdiff(names(df), cat_vars)
sapply(df[num_vars], class)
# comprovar si hi ha files amb valors buits (no n'hi ha)
n_total <- nrow(df)
cat("Files totals:", n_total, "\n")
na_per_row <- rowSums(is.na(df))
n_with_na <- sum(na_per_row > 0)
cat("Files amb almenys un NA:", n_with_na, "\n")
create_report(df, report_title = "EDA inicial")
ExpReport(df, op_file = "SmartEDA_df.html")  # informe HTML univariant/bivariant segons dades
cat_stat <- ExpCatStat(df, Target = NULL, result = "Stat", clim = 20)
cat_stat <- ExpCatStat(df, Target = Target, result = "Stat", clim = 20)
cat_stat <- ExpCatStat(df, Target = 'Target', result = "Stat", clim = 20)
cat_stat
# Visuals categòrics
ExpCatViz(df)           # barplots univariants de totes les categòriques
# 1) Informe ràpid
create_report(df, report_title = "EDA inicial")
# 2) Numèriques
ExpNumStat(df, by = "A", Qnt = seq(0,1,0.1), MesofShape = 2, Outlier = TRUE, round = 3)
plot_histogram(df); plot_density(df); plot_qq(df)
# 3) Categòriques
ExpCatStat(df, Target = NULL, result = "Stat", clim = 20)
