Tuition_fees_up_to_date = col_integer(),
Gender = col_integer(),
Scholarship_holder = col_integer(),
Age_at_enrollment = col_integer(),
International = col_integer(),
Curricular_units_1st_sem_credited = col_integer(),
Curricular_units_1st_sem_enrolled = col_integer(),
Curricular_units_1st_sem_evaluations = col_integer(),
Curricular_units_1st_sem_approved = col_integer(),
Curricular_units_1st_sem_grade = col_double(),
Curricular_units_1st_sem_without_evaluations = col_integer(),
Curricular_units_2nd_sem_credited = col_integer(),
Curricular_units_2nd_sem_enrolled = col_integer(),
Curricular_units_2nd_sem_evaluations = col_integer(),
Curricular_units_2nd_sem_approved = col_integer(),
Curricular_units_2nd_sem_grade = col_double(),
Curricular_units_2nd_sem_without_evaluations = col_integer(),
Unemployment_rate = col_double(),
Inflation_rate = col_double(),
GDP = col_double(),
Target = col_character()
)
)
base <- base %>%
dplyr::mutate(
target = dplyr::case_when(
Target %in% c("dropout", "Dropout", "DROPOUT") ~ 1L,
Target %in% c("enrolled", "graduated", "Enrolled", "Graduated") ~ 0L,
TRUE ~ 0L
)
)
View(base)
summary(base)
# Suposant que base$Target és de tipus character o factor
x <- tolower(as.character(base$Target))
# Nova columna binària 'target' en base R
base$target <- ifelse(x == "dropout", 1L,
ifelse(x %in% c("enrolled", "graduated"), 0L, 0L))
# Suposant que base$Target és de tipus character o factor
x <- tolower(as.character(base$Target))
# Nova columna binària 'target' en base R
base$target <- ifelse(x == "Dropout", 1L,
ifelse(x %in% c("Enrolled", "Graduated"), 0L, 0L))
# Seleccionem totes les variables excepte la resposta 'target'
vars <- setdiff(colnames(base), c("Target","target"))
par(mfrow=c(4,5), mar=c(3,3,3,1)) # finestra 4x5, marges
colors <- c(2,3)                  # colors: vermell i verd
# Boxplot si numèrica, barplot si factor
for (v in vars){
if (!is.factor(base[[v]])){
form <- as.formula(paste0(v," ~ target"))
boxplot(form, base, main = v, col = colors, horizontal = TRUE)
} else {
tab <- prop.table(table(base$target, base[[v]]), 2)
barplot(tab, main = v, col = colors, legend = FALSE)
}
}
vars <- setdiff(colnames(base), c("Target","target"))
par(mfrow=c(4,5), mar=c(3,3,3,1)) # finestra 4x5, marges
colors <- c(2,3)                  # colors: vermell i verd
for (v in vars){
if (!is.factor(base[[v]])){
form <- as.formula(paste0(v," ~ target"))
boxplot(form, base, main = v, col = colors, horizontal = TRUE)
} else {
tab <- prop.table(table(base$target, base[[v]]), 2)
barplot(tab, main = v, col = colors, legend = FALSE)
}
}
x <- tolower(as.character(base$Target))
base$Target <- ifelse(x == "Dropout", 1L,
ifelse(x %in% c("Enrolled", "Graduated"), 0L, 0L))
vars <- setdiff(colnames(base), c("Target"))
par(mfrow=c(4,5), mar=c(3,3,3,1)) # finestra 4x5, marges
colors <- c(2,3)                  # colors: vermell i verd
for (v in vars){
if (!is.factor(base[[v]])){
form <- as.formula(paste0(v," ~ target"))
boxplot(form, base, main = v, col = colors, horizontal = TRUE)
} else {
tab <- prop.table(table(base$target, base[[v]]), 2)
barplot(tab, main = v, col = colors, legend = FALSE)
}
}
vars <- setdiff(names(base), c("Target","target"))
par(mfrow = c(4,5), mar = c(3,3,3,1))
colors <- c(2,3)  # vermell i verd
for (v in vars) {
xv <- base[[v]]
if (is.numeric(xv)) {
# Grup de boxplot ha de ser factor perquè etiqueti bé
boxplot(xv ~ factor(base$target, levels=c(0,1), labels=c("stay","dropout")),
main = v, col = colors, horizontal = TRUE)
} else {
# Converteix a factor i calcula proporcions per columna
fac <- factor(xv)
tab <- prop.table(table(base$target, fac), 2)
barplot(tab, main = v, col = colors, legend = FALSE)
}
}
#Carregar llibreries ----------------------------------------------------------------
library(effects)
library(car)           # funcio Anova
library(emmeans)       # funcio emmeans
library(multcomp)      # funcio cld
library(multcompView)  # funcio cld
library(dplyr)         # manipulació de dades
library(forcats)
library(readr)
#Llegir dades  -------------------------------------------------------------------
base <- read_csv("../preprocessing/clean-data.csv", col_types = cols(
Marital_status = col_character(),
Application_mode = col_character(),
Application_order = col_integer(),
Course = col_character(),
Daytime_evening_attendance = col_character(),
Previous_qualification = col_character(),
Previous_qualification_grade = col_double(),
Nacionality = col_character(),
Mother_s_qualification = col_integer(),
Father_s_qualification = col_integer(),
Mother_s_occupation = col_character(),
Father_s_occupation = col_character(),
Admission_grade = col_double(),
Displaced = col_integer(),
Educational_special_needs = col_integer(),
Debtor = col_integer(),
Tuition_fees_up_to_date = col_integer(),
Gender = col_integer(),
Scholarship_holder = col_integer(),
Age_at_enrollment = col_integer(),
International = col_integer(),
Curricular_units_1st_sem_credited = col_integer(),
Curricular_units_1st_sem_enrolled = col_integer(),
Curricular_units_1st_sem_evaluations = col_integer(),
Curricular_units_1st_sem_approved = col_integer(),
Curricular_units_1st_sem_grade = col_double(),
Curricular_units_1st_sem_without_evaluations = col_integer(),
Curricular_units_2nd_sem_credited = col_integer(),
Curricular_units_2nd_sem_enrolled = col_integer(),
Curricular_units_2nd_sem_evaluations = col_integer(),
Curricular_units_2nd_sem_approved = col_integer(),
Curricular_units_2nd_sem_grade = col_double(),
Curricular_units_2nd_sem_without_evaluations = col_integer(),
Unemployment_rate = col_double(),
Inflation_rate = col_double(),
GDP = col_double(),
Target = col_character()
)
)
x <- tolower(as.character(base$Target))
base$target <- ifelse(x == "Dropout", 1L,
ifelse(x %in% c("Enrolled", "Graduated"), 0L, 0L))
vars <- setdiff(names(base), c("Target","target"))
par(mfrow = c(4,5), mar = c(3,3,3,1))
colors <- c(2,3)  # vermell i verd
for (v in vars) {
xv <- base[[v]]
if (is.numeric(xv)) {
# Grup de boxplot ha de ser factor perquè etiqueti bé
boxplot(xv ~ factor(base$target, levels=c(0,1), labels=c("stay","dropout")),
main = v, col = colors, horizontal = TRUE)
} else {
# Converteix a factor i calcula proporcions per columna
fac <- factor(xv)
tab <- prop.table(table(base$target, fac), 2)
barplot(tab, main = v, col = colors, legend = FALSE)
}
}
par(mfrow = c(4,5), mar = c(3,3,3,1))
colors <- c(2,3)  # vermell i verd
for (v in vars) {
xv <- base[[v]]
if (is.numeric(xv)) {
# Grup de boxplot ha de ser factor perquè etiqueti bé
boxplot(xv ~ factor(base$target, levels=c(0,1), labels=c("stay","dropout")),
main = v, col = colors, horizontal = TRUE)
} else {
# Converteix a factor i calcula proporcions per columna
fac <- factor(xv)
tab <- prop.table(table(base$target, fac), 2)
barplot(tab, main = v, col = colors, legend = FALSE)
}
}
for (v in vars) {
xv <- base[[v]]
if (is.numeric(xv)) {
# Grup de boxplot ha de ser factor perquè etiqueti bé
boxplot(xv ~ factor(base$target, levels=c(0,1), labels=c("stay","dropout")),
main = v, col = colors, horizontal = TRUE)
} else {
# Converteix a factor i calcula proporcions per columna
fac <- factor(xv)
tab <- prop.table(table(base$target, fac), 2)
barplot(tab, main = v, col = colors, legend = FALSE)
}
}
for (v in vars) {
xv <- base[[v]]
if (is.numeric(xv)) {
# Grup de boxplot ha de ser factor perquè etiqueti bé
boxplot(xv ~ factor(base$target, levels=c(0,1), labels=c("stay","dropout")),
main = v, col = colors, horizontal = TRUE)
} else {
# Converteix a factor i calcula proporcions per columna
fac <- factor(xv)
tab <- prop.table(table(base$target, fac), 2)
barplot(tab, main = v, col = colors, legend = FALSE)
}
}
for (v in vars) {
xv <- base[[v]]
grp <- factor(base$target, levels = c(0,1), labels = c("stay","dropout"))
if (is.numeric(xv)) {
boxplot(xv ~ grp, main = v, col = colors, horizontal = TRUE)
} else {
fac <- factor(xv)
if (nlevels(fac) > 1) {
tab <- prop.table(table(grp, fac), 2)  # proporcions per categoria
barplot(tab, main = v, col = colors, legend = FALSE, beside = TRUE)
} else {
plot.new(); title(main = paste(v, "(nivell únic)"))
}
}
}
grp <- factor(base$target, levels = c(0,1), labels = c("stay","dropout"))
par(mfrow = c(4,5), mar = c(3,3,3,1))
cols <- c("#D55E00", "#009E73")  # colors diferenciats
for (v in vars) {
xv <- base[[v]]
if (is.numeric(xv)) {
# Caixes verticals comparatives per grup
boxplot(xv ~ grp,
main = v, col = cols, horizontal = FALSE,
ylab = v, xlab = "target")
} else {
fac <- factor(base[[v]])
if (nlevels(fac) > 1) {
# Proporcions per categoria (columnes), dues barres per categoria
tab <- prop.table(table(grp, fac), 2)
barplot(tab, beside = TRUE, col = cols, main = v, legend = TRUE,
args.legend = list(bty = "n", x = "topright", cex = 0.7))
} else {
plot.new(); title(main = paste(v, "(nivell únic)"))
}
}
}
base <- read_csv("../preprocessing/clean-data.csv", col_types = cols(
Marital_status = col_character(),
Application_mode = col_character(),
Application_order = col_integer(),
Course = col_character(),
Daytime_evening_attendance = col_character(),
Previous_qualification = col_character(),
Previous_qualification_grade = col_double(),
Nacionality = col_character(),
Mother_s_qualification = col_integer(),
Father_s_qualification = col_integer(),
Mother_s_occupation = col_character(),
Father_s_occupation = col_character(),
Admission_grade = col_double(),
Displaced = col_integer(),
Educational_special_needs = col_integer(),
Debtor = col_integer(),
Tuition_fees_up_to_date = col_integer(),
Gender = col_integer(),
Scholarship_holder = col_integer(),
Age_at_enrollment = col_integer(),
International = col_integer(),
Curricular_units_1st_sem_credited = col_integer(),
Curricular_units_1st_sem_enrolled = col_integer(),
Curricular_units_1st_sem_evaluations = col_integer(),
Curricular_units_1st_sem_approved = col_integer(),
Curricular_units_1st_sem_grade = col_double(),
Curricular_units_1st_sem_without_evaluations = col_integer(),
Curricular_units_2nd_sem_credited = col_integer(),
Curricular_units_2nd_sem_enrolled = col_integer(),
Curricular_units_2nd_sem_evaluations = col_integer(),
Curricular_units_2nd_sem_approved = col_integer(),
Curricular_units_2nd_sem_grade = col_double(),
Curricular_units_2nd_sem_without_evaluations = col_integer(),
Unemployment_rate = col_double(),
Inflation_rate = col_double(),
GDP = col_double(),
Target = col_character()
)
)
View(data)
base$target <- ifelse(x == "Dropout", 1L,
ifelse(x %in% c("Enrolled", "Graduated"), 0L, 0L))
vars <- setdiff(names(base), c("Target","target"))
par(mfrow = c(4,5), mar = c(3,3,3,1))
colors <- c(2,3)  # vermell i verd
for (v in vars) {
xv <- base[[v]]
if (is.numeric(xv)) {
# Grup de boxplot ha de ser factor perquè etiqueti bé
boxplot(xv ~ factor(base$target, levels=c(0,1), labels=c("stay","dropout")),
main = v, col = colors, horizontal = TRUE)
} else {
# Converteix a factor i calcula proporcions per columna
fac <- factor(xv)
tab <- prop.table(table(base$target, fac), 2)
barplot(tab, main = v, col = colors, legend = FALSE)
}
}
View(data)
base$target <- ifelse(x == "Dropout", 1L,
ifelse(x %in% c("Enrolled", "Graduated"), 0L, 0L))
base$target <- ifelse(x == "Dropout", 1L,
ifelse(x %in% c("Enrolled", "Graduated"), 0L, 0L))
View(data)
x <- tolower(as.character(base$Target))   # normalitza a minúscules
base$target <- ifelse(x == "dropout", 1L,
ifelse(x %in% c("enrolled","graduated"), 0L, 0L))
View(base)
vars <- setdiff(names(base), c("Target","target"))
par(mfrow = c(4,5), mar = c(3,3,3,1))
colors <- c(2,3)  # vermell i verd
for (v in vars) {
xv <- base[[v]]
if (is.numeric(xv)) {
# Grup de boxplot ha de ser factor perquè etiqueti bé
boxplot(xv ~ factor(base$target, levels=c(0,1), labels=c("stay","dropout")),
main = v, col = colors, horizontal = TRUE)
} else {
# Converteix a factor i calcula proporcions per columna
fac <- factor(xv)
tab <- prop.table(table(base$target, fac), 2)
barplot(tab, main = v, col = colors, legend = FALSE)
}
}
if ("Target" %in% names(base)) {
base <- base[ , setdiff(names(base), "Target"), drop = FALSE]
}
base <- base %>%
mutate(across(where(is.factor), ~ fct_lump_min(.x, min = 100, other_level = "Other")))
m0 <- glm(target ~ ., data = base, family = binomial(link = "logit"))
m0 <- glm(target ~ ., data = base, family = binomial(link = "logit"))
summary(m0)
anova(m0, test = "Chisq")
base <- base %>%
mutate(across(where(is.factor), ~ fct_lump_min(.x, min = 50, other_level = "Other")))
m0 <- glm(target ~ ., data = base, family = binomial(link = "logit"))
anova(m0, test = "Chisq")
model_complet <- glm(target ~ ., data = base, family = binomial(link = "logit"))
model_nul <- glm(target ~ 1, data = base, family = binomial(link = "logit")
model_complet <- glm(target ~ ., data = base, family = binomial(link = "logit"))
model_nul <- glm(target ~ 1, data = base, family = binomial(link = "logit"))
anova(model_complet,model_nul, test = "Chisq")
anova(model_complet, test = "Chisq")
anova(model_complet, test = "Chisq")
m0.1 <- glm(target ~ Course + Application_mode + Mother_s_qualification +
Father_s_occupation + Debtor + Tuition_fees_up_to_date +
Gender + Scholarship_holder + Age_at_enrollment +
Curricular_units_1st_sem_approved +
Curricular_units_2nd_sem_enrolled +
Curricular_units_2nd_sem_approved +
Unemployment_rate,
data = base, family = binomial(link = "logit"))
m0.1 <- glm(
target ~ Application_mode +
Course +
Mother_s_occupation +
Debtor +
Tuition_fees_up_to_date +
Gender +
Scholarship_holder +
Age_at_enrollment +
Curricular_units_1st_sem_evaluations +
Curricular_units_1st_sem_approved +
Curricular_units_2nd_sem_approved,
data = base,
family = binomial()
)
m0.1 <- glm(
target ~ Application_mode +
Course +
Mother_s_occupation +
Debtor +
Tuition_fees_up_to_date +
Gender +
Scholarship_holder +
Age_at_enrollment +
Curricular_units_1st_sem_evaluations +
Curricular_units_1st_sem_approved +
Curricular_units_2nd_sem_approved,
data = base,
family = binomial()
(link = "logit")
)
m0.1 <- glm(
target ~ Application_mode +
Course +
Mother_s_occupation +
Debtor +
Tuition_fees_up_to_date +
Gender +
Scholarship_holder +
Age_at_enrollment +
Curricular_units_1st_sem_evaluations +
Curricular_units_1st_sem_approved +
Curricular_units_2nd_sem_approved,
data = base,
family = binomial(),
(link = "logit")
)
m0.1 <- glm(
target ~ Application_mode +
Course +
Mother_s_occupation +
Debtor +
Tuition_fees_up_to_date +
Gender +
Scholarship_holder +
Age_at_enrollment +
Curricular_units_1st_sem_evaluations +
Curricular_units_1st_sem_approved +
Curricular_units_2nd_sem_approved,
data = base,
family = binomial(),
(link = "logit"),
)
m0.1 <- glm(
target ~ Application_mode +
Course +
Mother_s_occupation +
Debtor +
Tuition_fees_up_to_date +
Gender +
Scholarship_holder +
Age_at_enrollment +
Curricular_units_1st_sem_evaluations +
Curricular_units_1st_sem_approved +
Curricular_units_2nd_sem_approved,
data = base,
family = binomial(),
)
m0.1 <- glm(
target ~ Application_mode +
Course +
Mother_s_occupation +
Debtor +
Tuition_fees_up_to_date +
Gender +
Scholarship_holder +
Age_at_enrollment +
Curricular_units_1st_sem_evaluations +
Curricular_units_1st_sem_approved +
Curricular_units_2nd_sem_approved,
data = base,
family = binomial(),
)
anova(m0.1, test = "Chisq")
anova(m0, test = "Chisq")
m0.1 <- glm(
target ~ Application_mode +
Course +
Mother_s_occupation +
Debtor +
Tuition_fees_up_to_date +
Gender +
Scholarship_holder +
Age_at_enrollment +
Curricular_units_1st_sem_evaluations +
Curricular_units_1st_sem_approved +
Curricular_units_2nd_sem_approved,
data = base,
family = binomial(),
)
anova(m0.1, model_complet, test = "Chisq")
base <- base %>%
mutate(across(where(is.factor), ~ fct_lump_min(.x, min = 25, other_level = "Other")))
model_complet <- glm(target ~ ., data = base, family = binomial(link = "logit"))
model_nul <- glm(target ~ 1, data = base, family = binomial(link = "logit"))
anova(model_complet, test = "Chisq")
m0.1 <- glm(
target ~ Application_mode +
Course +
Mother_s_occupation +
Debtor +
Tuition_fees_up_to_date +
Gender +
Scholarship_holder +
Age_at_enrollment +
Curricular_units_1st_sem_evaluations +
Curricular_units_1st_sem_approved +
Curricular_units_2nd_sem_approved,
data = base,
family = binomial(),
)
anova(m0.1, model_complet, test = "Chisq")
m0.1 <- glm(
target ~ Application_mode +
Course +
Mother_s_occupation +
Debtor +
Tuition_fees_up_to_date +
Gender +
Scholarship_holder +
Age_at_enrollment +
Curricular_units_1st_sem_evaluations +
Curricular_units_1st_sem_approved +
Curricular_units_2nd_sem_approved,
data = base,
family = binomial(),
)
anova(m0.1, model_complet, test = "Chisq")
AIC(model_complet, m0.1)
BIC(model_complet, m0.1)
m0 <- glm(target ~ ., data = base, family = binomial(link = "logit"))
anova(m0, test = "Chisq")
